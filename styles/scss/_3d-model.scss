/* ===  3D Renderer === */


/* This CSS needs to be supported by javascript: 

https://cdn.jsdelivr.net/gh/alexmwalker/view3d@master/js/scripts.js

...and a specific HTML structure



*/

@mixin makemearealboy {
  // re-usable mixin to set up :before :after pseudo elements
  display: block;
  content: '';
  position: absolute;
  top: 0;
  left: 0;
}

$paperedge: #eee; // TODO: the paper edges of the book - a subtle #fefefe -> #f1f1f1 CSS gradient might be nicer here

$lighting-effect: linear-gradient(100deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 25%, rgba(0,0,0,0.25) 50%, rgba(255,255,255,0) 100%); // The surface effect: mostly transparent white and black gradients

.cover img{ // some CSS resets set this to 100% - we don't want that here
  max-width: none
};


/*
$aspect-ratio is either 7:9 (.76) or 8:10 (.8) ratio for all SitePoint books and shouldn't change unless the book format changes. */

$aspect-ratio:       7/9.15; //width vs height
$aspect-ratio-alt:   8/10;  // For 8x10" books
$spine-ratio:        0.06; // standard width book spines
$spine-ratio-chunky: 0.09; // for books with fatter spines
$book-perspective:   4.25;  // Lower numbers make appearance more 'warped' by perspective. 

/* -- Spin speed -- */

$spin-speed: 12s; 

/* -- Preset Book Display Sizes -- */


/* HEIGHTS  */

$height: 13rem; // this is the default render size. We scale the model in the layout using transform:scale()  applied via .size-small,.size-mid,.size-large class


/*  WIDTHS  */
$width: $height * $aspect-ratio;
$width-alt: $height * $aspect-ratio-alt;

/* SPINES  */
$spine: $height * $spine-ratio;


/* CHUNKY SPINES */
$spine-chunky: $height * $spine-ratio-chunky;


/* Set the render size */

.size-thumbnail{
  transform: scale(.5);
  padding: 0rem 0;
  left: 30%;
  transform-origin: 0 0;
  //outline: 1px yellow dashed!important;
}

.size-small{
  transform: scale(.85);
  padding: 1rem 0;
  left: 30%;
  //outline: 1px yellow dashed!important;
}
.size-mid{
  transform: scale(1);
  padding: 2rem 0 0;
  //outline: 1px yellowgreen dashed!important;
  left: 30%;
}
.size-large{
  transform: scale(1.25);
  padding: 4rem 0 0;
  //outline: 1px yellowgreen dashed!important;
  left: 28%;
}



.book{
  height: $height;
  width: $width;
  perspective: $height * $book-perspective;
  .backcover {
    transform: rotateY(180deg) translateZ($spine);
    &:before,
    &:after {
      width: $spine;
    }
  }
}

// adjustments for 8 x 10" books  (class .aspect8-10). Most are 7 x 9"
.book.aspect8-10{
  width: $width-alt;
}

// adjustments for wider spine (class .chunky)
.book.chunky {
  .backcover {
    transform: rotateY(180deg) translateZ($spine-chunky);
    &:before,
    &:after {
      width: $spine-chunky;
    }
  }
}


.book {
  // book container
  margin: 2em;
  position: relative;
  transform-origin: 50% 100%;
  perspective-origin: 50% 50%; //  looking at the model from eye-level (the default)
}
.highview{
  perspective-origin: 0% 0; //  looking down at the model from slightly above 
}
.lowview{
  perspective-origin: 100% 100%; //  looking up at the model from slightly below 
}




.cover {
  /* This is a mask to crop the IMG to only cover */
  position: relative;
  overflow: hidden;
  height: 100%;
  width: 100%;
  z-index: 1;
  &:after {
    /* the reflection effect across the IMG cover */
    @include makemearealboy;
    height: 100%;
    width: 100%;
    opacity: 1;
    background-image: $lighting-effect, none;
    background-size: 180% 200%;  
    background-position: 0% 100%; 
    background-repeat: repeat;
    top: 0;
    left: 0;
    position: relative;
    z-index: 12;
  }
}

.book .cover {
  box-shadow: 0px 0px 4px rgba(0, 0, 0, .15), 3px 3px 4px rgba(0, 0, 0, .3), 6px 6px 4px rgba(0, 0, 0, .1); // for flat render only
}
.view3d .cover {
  box-shadow: none;
  /* remove anchoring shadow in 3D view */
}

.cover img {
  float: right;
  height: 100%;
}

.view3d .bookgroup {
  // an added wrapper via JS
  transform-style: preserve-3d;
  transform-origin: 50% 50%;
  transform: rotateY(0deg) rotateX(0deg); //default view
  height: 100%;
  width: 100%;
  position: relative;
  transition: transform 1.5s ease-in;
  &:before,
  &:after { // top edge
    @include makemearealboy;
    transform-style: preserve-3d;
    background: $paperedge;
    top: 0%;
    transform-origin: 0% 0%;
    width: 100%;
    height: (100%*$spine-ratio);
    transform: rotateY(0deg) rotateX(-90deg) translateX(0px); //default view
  }
  &:after { // base edge (inc 'grounding' shadow)
    top: 100%;
    box-shadow: 0px 0px 5px rgba(0, 0, 0, .75), 2px 2px 15px rgba(0, 0, 0, .5);
  }
}

.backcover {
  // Generated JS : Div containing current cover of BG
  transform-style: preserve-3d;
  height: 100%;
  width: 100%;
  background-size: 500% 200%, auto 100%;  
  background-position: -200% 100%, left top ;
  position: absolute;
  top: 0px;
  z-index: -1;
  right: 0px;
  &:before,
  &:after {
    // :before is the right page edge
    @include makemearealboy;
    background: $paperedge;
    height: 100%;
    transform: rotateY(90deg);
    transform-origin: (0% 50%);
    z-index: 9;
  }
  &:after { //spine 
    transform: rotateY(90deg) translateZ(0px);
    left: 100%;
    background-size: 500% 200%, auto 100%;
    transform-origin: (0% 50%);
    background: inherit; // picks up BG image from parent (yay!)
    background-position: center center
  }
}


/* =======  POSING CLASSES ========== */

// oclock notation: Viewer stands at 12 and model faces hour markers
//     +------------+
//     |   Viewer   |
//     +------------+
//           12
//      11        1      
//  10       ⤊        2
//           ||
// 9         ||         3
//       +-model-+
//  8        ⫰        4
//
//      7         5
//           6
//
//+----------------------+
//|  Class = '.clock-12' |
//+----------------------+

.oclock-12 .bookgroup {
  transform: rotateY(0deg) rotateX(0deg); //default view
}
.oclock-1 .bookgroup {
  transform: rotateY(-30deg) rotateX(0deg); //default view
}
.oclock-2 .bookgroup {
  transform: rotateY(-60deg) rotateX(0deg); //default view
}
.oclock-3 .bookgroup {
  transform: rotateY(-90deg) rotateX(0deg); //default view
}
.oclock-4 .bookgroup {
  transform: rotateY(-120deg) rotateX(0deg); //default view
}
.oclock-5 .bookgroup {
  transform: rotateY(-150deg) rotateX(0deg); //default view
}
.oclock-6 .bookgroup {
  transform: rotateY(-180deg) rotateX(0deg); //reverse side
}
.oclock-7 .bookgroup {
  transform: rotateY(-210deg) rotateX(0deg); //default view
}
.oclock-8 .bookgroup {
  transform: rotateY(-240deg) rotateX(0deg); //default view
}
.oclock-9 .bookgroup {
  transform: rotateY(-263deg) rotateX(0deg); //default view
}
.oclock-10 .bookgroup {
  transform: rotateY(-300deg) rotateX(0deg); //default view
}
.oclock-11 .bookgroup {
  transform: rotateY(-330deg) rotateX(0deg); //default view
}







.hover:hover .bookgroup {
  transform: rotateY(30deg) scale(1.05);
  transition: transform .35s ease-in-out;
  animation: spin $spin-speed infinite linear .35s;

  .backcover{
    animation: lightingeffect-back $spin-speed infinite ease-in-out ;

  }
  .cover:after{ // this effectively replaces the *actual* IMG element
    animation: lightingeffect-cover $spin-speed infinite ease-in-out (-$spin-speed/2); // delay: -half
      //border: 4px cyan dashed;
      }

  .backcover:after{ // the spine
    animation: lightingeffect-spine $spin-speed infinite ease-in-out (-$spin-speed/4);
      //border: 4px red dashed;
      }
}

@keyframes spin {
  0% {
    transform: rotateY(30deg) scale(1.05);
  }
  100% {
    transform: rotateY(390deg) scale(1.05);
  }
}

/* move the reflection/sheen layer across the surface */
@keyframes lightingeffect-back { 
  0% { 
    background-position: -200% 100%, left top ;
  }
  25% { 
    background-position: -200% 100%, left top ;
  }
  50% { 
    background-position: 0% 100%, left top;
  }
  75% {
    background-position: 200% 100%, left top;
  }
  100% {
    background-position: 200% 100%, left top;
  }
}
@keyframes lightingeffect-spine { 
  0% { 
    background-position: -200% 100%, center top ; 
  }
  25% { 
    background-position: -200% 100%, center top ;
  }
  50% { 
    background-position: 0% 100%, center top;
  }
  75% {
    background-position: 200% 100%, center top;
  }
  100% {
    background-position: 200% 100%, center top;
  }
}
@keyframes lightingeffect-cover { 
  0% { 
    background-position: -200% 100%, right top ;
  }
  25% { 
    background-position: -200% 100%, right top ;
  }
  50% { 
    background-position: 0% 100%, right top;
  }
  75% {
    background-position: 200% 100%, right top;
  }
  100% {
    background-position: 200% 100%, left top;
  }
}